From 0c51f67e3cb05c9ab74f78f5ca03c8e43c352b02 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20L=C3=B6ffler?= <st.loeffler@gmail.com>
Date: Thu, 11 Feb 2016 23:14:20 -0500
Subject: [PATCH 2/3] Native Mac font handling

---
 CMakeLists.txt                 |  16 +-
 config.h.cmake                 |   3 +
 poppler/GlobalParams.cc        |  15 ++
 poppler/GlobalParams.h         |   7 +
 poppler/GlobalParamsMac.cc     | 312 +++++++++++++++++++++++++++++++++
 poppler/poppler-config.h.cmake |   5 +
 6 files changed, 357 insertions(+), 1 deletion(-)
 create mode 100644 poppler/GlobalParamsMac.cc

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ef987a86..b702c5e4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -96,17 +96,22 @@ if(WIN32)
 elseif(ANDROID)
   # on android we don't have fontconfig and we don't want windows-specific code
   set(_default_fontconfiguration "generic")
+elseif(APPLE)
+  set(_default_fontconfiguration "mac")
 else()
   set(_default_fontconfiguration "fontconfig")
 endif()
-set(FONT_CONFIGURATION "${_default_fontconfiguration}" CACHE STRING "The font configuration backend (win32|generic|fontconfig).")
+set(FONT_CONFIGURATION "${_default_fontconfiguration}" CACHE STRING "The font configuration backend (win32|generic|mac|fontconfig).")
 string(TOLOWER "${FONT_CONFIGURATION}" font_configuration)
 set(WITH_FONTCONFIGURATION_WIN32 OFF)
+set(WITH_FONTCONFIGURATION_MAC OFF)
 set(WITH_FONTCONFIGURATION_FONTCONFIG OFF)
 if(font_configuration STREQUAL "win32")
   set(WITH_FONTCONFIGURATION_WIN32 ON)
 elseif(font_configuration STREQUAL "fontconfig")
   set(WITH_FONTCONFIGURATION_FONTCONFIG ON)
+elseif(font_configuration STREQUAL "mac")
+  set(WITH_FONTCONFIGURATION_MAC ON)
 elseif(font_configuration STREQUAL "generic")
   message(STATUS "no fontconfig or win32 specific code")
 else()
@@ -497,6 +502,15 @@ add_library(poppler STATIC ${poppler_SRCS})
 else()
 add_library(poppler ${poppler_SRCS})
 endif()
+if(WITH_FONTCONFIGURATION_MAC)
+  if(NOT BUILD_SHARED_LIBS)
+    find_library(CORE_FOUNDATION CoreFoundation)
+    set(poppler_LIBS ${poppler_LIBS} ${CORE_FOUNDATION})
+  endif()
+  find_library(APPLICATION_SERVICES ApplicationServices)
+  set(poppler_LIBS ${poppler_LIBS} ${APPLICATION_SERVICES})
+endif(WITH_FONTCONFIGURATION_MAC)
+
 set_target_properties(poppler PROPERTIES VERSION 94.0.0 SOVERSION 94)
 if(MINGW AND BUILD_SHARED_LIBS)
     get_target_property(POPPLER_SOVERSION poppler SOVERSION)
diff --git a/config.h.cmake b/config.h.cmake
index c92fc352..af08d974 100644
--- a/config.h.cmake
+++ b/config.h.cmake
@@ -171,6 +171,9 @@
 /* Use fontconfig font configuration backend */
 #cmakedefine WITH_FONTCONFIGURATION_FONTCONFIG 1
 
+/* Use Mac font configuration backend */
+#cmakedefine WITH_FONTCONFIGURATION_MAC 1
+
 /* Use win32 font configuration backend */
 #cmakedefine WITH_FONTCONFIGURATION_WIN32 1
 
diff --git a/poppler/GlobalParams.cc b/poppler/GlobalParams.cc
index ea5d8125..5b66e0fb 100644
--- a/poppler/GlobalParams.cc
+++ b/poppler/GlobalParams.cc
@@ -239,6 +239,9 @@ public:
 #ifdef WITH_FONTCONFIGURATION_FONTCONFIG
   void addFcFont(SysFontInfo *si) {fonts->push_back(si);}
 #endif
+#ifdef WITH_FONTCONFIGURATION_MAC
+	void addMacFont(SysFontInfo *si) {fonts->push_back(si);}
+#endif
 private:
 
 #ifdef _WIN32
@@ -385,6 +388,10 @@ GlobalParams::GlobalParams(const char *customPopplerDataDir)
   : popplerDataDir(customPopplerDataDir)
 {
   initBuiltinFontTables();
+#if WITH_FONTCONFIGURATION_MAC
+  tempFontFiles = NULL;
+  numTempFontFiles = 0;
+#endif
 
   // scan the encoding in reverse because we want the lowest-numbered
   // index for each char name ('space' is encoded twice)
@@ -553,6 +560,12 @@ GlobalParams::~GlobalParams() {
     delete entry;
   }
   delete toUnicodeDirs;
+#if WITH_FONTCONFIGURATION_MAC
+  while (numTempFontFiles > 0) {
+    --numTempFontFiles;
+    unlink(tempFontFiles[numTempFontFiles]);
+  }
+#endif
   delete sysFonts;
   delete textEncoding;
 
@@ -1012,6 +1025,8 @@ fin:
 GooString *GlobalParams::findBase14FontFile(const GooString *base14Name, const GfxFont *font) {
   return findFontFile(base14Name);
 }
+#elif WITH_FONTCONFIGURATION_MAC
+#include "GlobalParamsMac.cc"
 #else
 GooString *GlobalParams::findBase14FontFile(const GooString *base14Name, const GfxFont *font) {
   return findFontFile(base14Name);
diff --git a/poppler/GlobalParams.h b/poppler/GlobalParams.h
index 755cdc1a..7dafa2ea 100644
--- a/poppler/GlobalParams.h
+++ b/poppler/GlobalParams.h
@@ -137,6 +137,9 @@ public:
   UnicodeMap *getUnicodeMap(GooString *encodingName);
   CMap *getCMap(const GooString *collection, const GooString *cMapName, Stream *stream = nullptr);
   UnicodeMap *getTextEncoding();
+#if WITH_FONTCONFIGURATION_MAC
+  bool loadPlatformFont(const char * fontName);
+#endif
 
   std::vector<GooString*> *getEncodingNames();
 
@@ -190,6 +193,10 @@ private:
 #ifdef _WIN32
   // windows font substitutes (for CID fonts)
   std::unordered_map<std::string, std::string> substFiles;
+#endif
+#if WITH_FONTCONFIGURATION_MAC
+  char **tempFontFiles;
+  int numTempFontFiles;
 #endif
   // font files: font name mapped to path
   std::unordered_map<std::string, std::string> fontFiles;
diff --git a/poppler/GlobalParamsMac.cc b/poppler/GlobalParamsMac.cc
new file mode 100644
index 00000000..731e7247
--- /dev/null
+++ b/poppler/GlobalParamsMac.cc
@@ -0,0 +1,312 @@
+//========================================================================
+//
+// GlobalParamsMac.cc
+//
+//========================================================================
+
+//========================================================================
+//
+// Contributed to the Poppler project - http://poppler.freedesktop.org
+//
+// Copyright (c) 2009 Jonathan Kew
+// Copyright (c) 2016 Stefan LÃ¶ffler
+//
+//========================================================================
+
+#ifndef PACKAGE_NAME
+#include <config.h>
+#endif
+
+#ifdef USE_GCC_PRAGMAS
+#pragma implementation
+#endif
+
+#include <string.h>
+#include <stdio.h>
+
+#include "goo/gmem.h"
+#include "goo/GooString.h"
+#include "goo/gfile.h"
+#include "Error.h"
+
+#include "GlobalParams.h"
+#include "GfxFont.h"
+
+#if MULTITHREADED
+#  define lockGlobalParams            gLockMutex(&mutex)
+#  define lockUnicodeMapCache         gLockMutex(&unicodeMapCacheMutex)
+#  define lockCMapCache               gLockMutex(&cMapCacheMutex)
+#  define unlockGlobalParams          gUnlockMutex(&mutex)
+#  define unlockUnicodeMapCache       gUnlockMutex(&unicodeMapCacheMutex)
+#  define unlockCMapCache             gUnlockMutex(&cMapCacheMutex)
+#else
+#  define lockGlobalParams
+#  define lockUnicodeMapCache
+#  define lockCMapCache
+#  define unlockGlobalParams
+#  define unlockUnicodeMapCache
+#  define unlockCMapCache
+#endif
+
+/* Mac implementation of external font matching code */
+
+#include <ApplicationServices/ApplicationServices.h>
+
+bool GlobalParams::loadPlatformFont(const char * fontName) {
+	char * myName = copyString(fontName);
+	ATSFontRef fontRef = kATSUInvalidFontID;
+	while (1) {
+		CFStringRef psName = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault,
+							 myName,
+							 kCFStringEncodingASCII,
+							 kCFAllocatorNull);
+		fontRef = ATSFontFindFromPostScriptName(psName, kATSOptionFlagsDefault);
+		CFRelease(psName);
+		if (fontRef != kATSUInvalidFontID)
+			break;
+		char * cp = strrchr(myName, ',');
+		if (cp) {
+			*cp = '\0';
+			continue;
+		}
+		cp = strrchr(myName, '-');
+		if (cp) {
+			*cp = '\0';
+			continue;
+		}
+		if ( strcmp(myName, "ZapfDingbats") == 0 ) {
+			// On OS X 10.5.0 -- 10.6.7 (plus or minus a few versions?) the
+			// PostScript name of ZapfDingbats is ZapfDingbatsITC
+			gfree(myName);
+			myName = copyString("ZapfDingbatsITC");
+			continue;
+		}
+		break;
+	}
+	gfree(myName);
+	if (fontRef == kATSUInvalidFontID)
+		return false;
+
+	// Currently support only TrueType fonts: check for presence of 'glyf' table
+	// TODO: what about OpenType/CFF? DisplayFontParam doesn't seem to allow for this
+#define TAG(a,b,c,d) ( (UInt32)((a)<<24) | (UInt32)((b)<<16) | (UInt32)((c)<<8) | (UInt32)(d) )
+
+	ByteCount tableSize;
+	if (ATSFontGetTable(fontRef, TAG('g','l','y','f'), 0, 0, nullptr, &tableSize) != noErr ||
+			tableSize == 0)
+		return false;
+
+	do { // if the font comes from a .ttf file, we can use that directly
+		FSRef fsRef;
+		if (ATSFontGetFileReference(fontRef, &fsRef) != noErr)
+			break;
+
+		UInt8 fontPath[PATH_MAX + 1];
+		if (FSRefMakePath(&fsRef, fontPath, PATH_MAX) != noErr)
+			break;
+
+		int pathLen = strlen((const char *) fontPath);
+		if (pathLen > 4 && fontPath[pathLen - 4] == '.') {
+			const char * ext = (const char *) fontPath + pathLen - 3;
+
+			// accept either .ttf or .otf extension; .otf could contain TrueType-format glyphs
+			if (strcmp(ext, "ttf") == 0 || strcmp(ext, "TTF") == 0 ||
+					strcmp(ext, "otf") == 0 || strcmp(ext, "OTF") == 0) {
+				addFontFile(new GooString(fontName), new GooString((const char*)fontPath));
+				return true;
+			}
+		}
+	} while (0);
+
+	// for .dfont or suitcase files, FoFiTrueType can't handle them, so we extract
+	// the required font to a temporary .ttf file and then use that
+
+	struct sfntHeader {
+		UInt32 version;
+		UInt16 numTables;
+		UInt16 searchRange;
+		UInt16 entrySelector;
+		UInt16 rangeShift;
+		struct {
+			UInt32 tag;
+			UInt32 checkSum;
+			UInt32 offset;
+			UInt32 length;
+		} dir[1];
+	};
+
+	ByteCount headerSize;
+	if (ATSFontGetTableDirectory(fontRef, 0, nullptr, &headerSize) != noErr)
+		return false;
+	struct sfntHeader * header = (struct sfntHeader *) new Byte[headerSize];
+	ATSFontGetTableDirectory(fontRef, headerSize, (Byte *) header, &headerSize);
+
+#define READ16(x) ( (UInt16)(((UInt8*)&(x))[0]<<8) + (UInt16)((UInt8*)&(x))[1] )
+#define READ32(x) ( (UInt32)(((UInt8*)&(x))[0]<<24) + (UInt32)(((UInt8*)&(x))[1]<<16) + (UInt32)(((UInt8*)&(x))[2]<<8) + (UInt32)((UInt8*)&(x))[3] )
+
+	UInt32 version = READ32(header->version);
+	if (version != 0x00010000 &&
+// TODO: figure out whether we can support OpenType/CFF fonts here
+//      version != TAG('O','T','T','0') &&
+			version != TAG('t','r','u','e')) {
+		delete [] (Byte *) header;
+		return false;
+	}
+
+	UInt16 numTables = READ16(header->numTables);
+	UInt32 maxOffset = 0;
+	for (UInt16 i = 0; i < numTables; ++i) {
+		UInt32 end = READ32(header->dir[i].offset) + READ32(header->dir[i].length);
+		if (end > maxOffset)
+			maxOffset = end;
+	}
+
+	char * ttfData = new char[maxOffset];
+	struct sfntHeader * newFont = (struct sfntHeader *) ttfData;
+
+	newFont->version = header->version;
+
+	UInt16 realTables = 0, tableIndex;
+	for (tableIndex = 0; tableIndex < numTables; ++tableIndex) {
+		ByteCount tableLoc = READ32(header->dir[tableIndex].offset);
+		if (tableLoc == 0) // ATS synthetic table, do not copy
+			continue;
+		tableSize = READ32(header->dir[tableIndex].length);
+		if (ATSFontGetTable(fontRef, READ32(header->dir[tableIndex].tag),
+												0, tableSize, ttfData + tableLoc, &tableSize) != noErr)
+			break;
+		newFont->dir[realTables] = header->dir[tableIndex];
+		realTables++;
+	}
+	delete [] (Byte*) header;
+	if (tableIndex < numTables) {
+		delete [] ttfData;
+		return false;
+	}
+
+	newFont->numTables = READ16(realTables);
+	UInt16 searchRange = realTables;
+	searchRange |= searchRange >> 1;
+	searchRange |= searchRange >> 2;
+	searchRange |= searchRange >> 4;
+	searchRange |= searchRange >> 8;
+	searchRange &= ~searchRange >> 1;
+	searchRange *= 16;
+	newFont->searchRange = READ16(searchRange);
+	UInt16 rangeShift = realTables * 16 - searchRange;
+	UInt16 entrySelector = 0;
+	while (searchRange > 16) {
+		++entrySelector;
+		searchRange >>= 1;
+	}
+	newFont->entrySelector = READ16(entrySelector);
+	newFont->rangeShift = READ16(rangeShift);
+
+	char * fontPath = copyString("/tmp/XXXXXXXX.ttf");
+	if (mkstemps(fontPath, 4) == -1) {
+		delete [] ttfData;
+		gfree(fontPath);
+		return false;
+	}
+
+	bool writtenOk = false;
+	FILE * ttfFile = fopen(fontPath, "wb");
+	if (ttfFile) {
+		writtenOk = (fwrite(ttfData, 1, maxOffset, ttfFile) == maxOffset);
+		fclose(ttfFile);
+	}
+	delete [] ttfData;
+	if (!writtenOk) {
+		unlink(fontPath);
+		gfree(fontPath);
+		return false;
+	}
+
+	void * p = realloc(tempFontFiles, (numTempFontFiles + 1) * sizeof(char *));
+	if (!p) {
+		unlink(fontPath);
+		gfree(fontPath);
+		return false;
+	}
+	tempFontFiles = (char **) p;
+	tempFontFiles[numTempFontFiles] = fontPath;
+	++numTempFontFiles;
+
+	addFontFile(new GooString(fontName), new GooString(fontPath));
+
+	return true;
+}
+
+static const char *
+findSubstituteName(const char * fontName) {
+	bool bold = (strstr(fontName, "Bold") != nullptr ||
+								strstr(fontName, "bold") != nullptr || // to catch "Semibold", "Demibold", etc
+								strstr(fontName, "Ultra") != nullptr ||
+								strstr(fontName, "Heavy") != nullptr ||
+								strstr(fontName, "Black") != nullptr);
+	bool ital = (strstr(fontName, "Italic") != nullptr ||
+								strstr(fontName, "Oblique") != nullptr);
+	if (bold) {
+		return ital ? "Helvetica-BoldOblique" : "Helvetica-Bold";
+	} else {
+		return ital ? "Helvetica-Oblique" : "Helvetica";
+	}
+}
+
+
+/*******************************************************************************
+ * Implementation of abstract functions
+ ******************************************************************************/
+
+// Not needed
+void GlobalParams::setupBaseFonts(const char *dir) {
+}
+
+GooString *GlobalParams::findBase14FontFile(const GooString *base14Name, const GfxFont *font) {
+  SysFontType type;
+  int fontNum;
+
+  return findSystemFontFile(font, &type, &fontNum, nullptr, base14Name);
+}
+
+GooString *GlobalParams::findSystemFontFile(const GfxFont *font,
+					  SysFontType *type,
+					  int *fontNum, GooString *substituteFontName, const GooString *base14Name) {
+	std::unordered_map<std::string, std::string>::iterator path;
+	GooString *fontName = font->getName()->copy();
+	if (!fontName) return nullptr;
+	lockGlobalParams;
+	path = fontFiles.find(fontName->toStr());
+	if (path == fontFiles.end()) {
+		if (loadPlatformFont(fontName->c_str()))
+			path = fontFiles.find(fontName->toStr());
+		if (path == fontFiles.end()) {
+			GooString * substFontName = new GooString(findSubstituteName(fontName->c_str()));
+			error(errSyntaxError, -1, "Couldn't find a font for '{0:t}', subst is '{1:t}'", fontName, substFontName);
+			path = fontFiles.find(substFontName->toStr());
+			if (path == fontFiles.end()) {
+				if (loadPlatformFont(substFontName->c_str()))
+					path = fontFiles.find(substFontName->toStr());
+
+				// this isn't supposed to fail, because the substitutes are system fonts
+				// that should always be available
+				assert(path != fontFiles.end());
+				if (substituteFontName)
+					substituteFontName->Set(substFontName->c_str());
+			}
+			delete substFontName;
+		}
+	}
+
+	if (type) {
+		if (path->second.size() > 4 && !strcasecmp(path->second.c_str() + path->second.size() - 4, ".ttc"))
+			*type = sysFontTTC;
+		else
+			*type = sysFontTTF;
+	}
+	if (fontNum)
+		*fontNum = 0;
+
+	unlockGlobalParams;
+	return new GooString(path->second);
+}
diff --git a/poppler/poppler-config.h.cmake b/poppler/poppler-config.h.cmake
index 2adf181c..4ae3eaf5 100644
--- a/poppler/poppler-config.h.cmake
+++ b/poppler/poppler-config.h.cmake
@@ -53,6 +53,11 @@
 #cmakedefine TEXTOUT_WORD_LIST 1
 #endif
 
+/* Use Mac font configuration backend */
+#ifndef WITH_FONTCONFIGURATION_MAC
+#cmakedefine WITH_FONTCONFIGURATION_MAC 1
+#endif
+
 /* Support for curl is compiled in. */
 #ifndef POPPLER_HAS_CURL_SUPPORT
 #cmakedefine POPPLER_HAS_CURL_SUPPORT 1
-- 
2.20.1

